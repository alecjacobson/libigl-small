// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "instance.isph"
#include "shapes/differentialgeometry.isph"
#include "../../../../embree_ispc/include/embree.isph"

struct Light;
struct EnvironmentLight;

/*! device-side instance of host-side embree::SPMDBackendScene */
struct Scene 
{
  RefCount base;

  uniform Light            **allLights;   //!< All lights of the scene
  uint                       num_allLights;
  uniform EnvironmentLight **envLights;   //!< Environment lights of the scene
  uint                       num_envLights;
  uniform Instance         **geometry;    //!< Geometries of the scene
  uint                       num_geometries;
  RTCGeometry* uniform geom;
  Intersector* intersector;
};

inline void postIntersect(const uniform Scene *uniform scene,
                          const varying Ray ray, 
                          varying DifferentialGeometry &dg)
{
  if (hadHit(ray))
    foreach_unique(geomID in ray.id0) {
      scene->geometry[geomID]->shape->postIntersect(scene->geometry[geomID]->shape,ray,dg);
    }
}
