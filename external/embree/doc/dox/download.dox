/*! \page building_embree Building Embree

<h3>Supported Platforms</h3>

<p>Embree supports Windows, Linux and MacOS, each in 32bit and 64bit
modes. The code compiles with the Intel Compiler, the Microsoft
Compiler, GCC and CLANG. Using the Intel Compiler improves performance
by approximately 10%. Performance also varies across different
operating systems. Embree is optimized for Intel CPUs supporting SSE,
AVX, and AVX2 instructions, and requires at least a CPU with support
for SSE2.</p>

<p>The Xeon Phi&trade; version of Embree only works under Linux in 64bit
mode. For compilation of the the Xeon Phi&trade; code the Intel Compiler is
required. The host side code compiles with GCC, CLANG, and the Intel
Compiler.</p>

<h3>Downloading Embree</h3>
      
<p>We provide binaries for Embree for Linux (64 bit), MacOS (64 bit), and
Windows (64 bit):</p>

<p><a href="http://github.com/embree/embree-bin/archive/v2.2_linux.zip">embree-bin-2.2_linux.zip</a></p>
<p><a href="http://github.com/embree/embree-bin/archive/v2.2_macos.zip">embree-bin-2.2_macos.zip</a></p>
<p><a href="http://github.com/embree/embree-bin/archive/v2.2_win.zip">embree-bin-2.2_win.zip</a></p>

<p>If you need to recompile Embree for your platform, please download
the sources and follow the compilation instructions below:</p>

<p><a href="http://github.com/embree/embree/archive/v2.2.zip">embree-2.2.zip</a></p>
<p><a href="http://github.com/embree/embree/archive/v2.1.zip">embree-2.1.zip</a></p>
<p><a href="http://github.com/embree/embree/archive/v2.0.zip">embree-2.0.zip</a></p>
<p><a href="http://github.com/embree/embree/archive/v1.1.zip">embree-1.1.zip</a></p>
        
<p>Alternatively you can also use <code>git</code> to get the latest Embree 2.2:</p>
<pre><code>$ git clone https://github.com/embree/embree.git embree
$ cd embree
$ git checkout v2.2</code></pre>
      
<p>You can also check out Embree with subversion:</p>
<pre><code>$ svn checkout https://github.com/embree/embree.git/branches/v2.2 embree
$ cd embree</code></pre>

<p>If you encounter bugs please report them to the <a
  href="https://github.com/embree/embree/issues">GitHub Issue
 Tracker</a> for Embree.</p>

<h3>Folder Structure</h3>

<p>Once you downloaded or checked out Embree you will see the following
folder structure:</p>
      
<dl>
    <dt>embree</dt>                 <dd>Embree root folder</dd>
    <dt>embree/include</dt>        <dd>User API to the ray tracing kernels</dd>
    <dt>embree/kernels</dt>                <dd>Embree ray tracing kernels implementation</dd>
    <dt>embree/kernels/xeon</dt>           <dd>Embree kernels for Intel&reg; Xeon&reg; CPUs</dd>
    <dt>embree/kernels/xeonphi</dt>        <dd>Embree kernels for Intel&reg; Xeon Phi&trade; Accelerators</dd>
    <dt>embree/tutorials</dt>              <dd>Embree tutorials</dd>
</dl>

<p>How Embree is built depends on what platform you are using.
Detailed instructions for building Embree on Linux, Windows, and MacOS
can be found in the following sections.</p>
      
<h3>Compiling Embree on Linux and MacOS</h3>

<p>Embree requires the Intel SPMD Compiler (ISPC) to compile. We have
tested ISPC version 1.6.0, but more recent versions of ISPC should
also work. You can download and install the ISPC binaries from <a
 href="http://ispc.github.com/downloads.html">ispc.github.com</a>. After installation, put
the path to the ispc executable permanently into your PATH.</p>
      
<pre><code>export PATH=path-to-ispc:$PATH</code></pre>

<p>You additionally have to install CMake and the developer version of
GLUT. Under MaxOS, these dependencies can be installed using
<a href="http://www.macports.org/">MacPorts</a>:</p>

<pre><code>sudo port install cmake freeglut</code></pre>

<p>Under Linux you can install these dependencies using yum. Depending
on your Linux distribution, some of these packages might already be
installed or might have slightly different names.</p>

 <pre><code>sudo yum install cmake.x86_64
sudo yum install freeglut.x86_64 freeglut-devel.x86_64
sudo yum install libXmu.x86_64 libXi.x86_64 
sudo yum install libXmu-devel.x86_64 libXi-devel.x86_64</code></pre>
        
<p>Finally you can compile Embree using CMake. Create a build directory
and execute "ccmake .." inside this directory.</p>
        
<pre><code>mkdir build
cd build
cmake ..</code></pre>

<p>This will open a configuration dialog where you can perform various
configurations as described below. After having configured Embree,
press c (for configure) and g (for generate) to generate a Makefile
and leave the configuration. The code can be compiled by executing
make.</p>

<pre><code>make</code></pre>

The executables will be generated inside the build folder. We
recommend to finally install the Embree library and header files on
your system:

<pre><code>sudo make install</code></pre>

<p>The default configuration in the configuration dialog should be
appropiate for most usages. The following table described all
parameters that can be configured:</p>

<table>
  <tr><th>Parameter</th><th>Description</th><th>Default Value</th></tr>
  <tr><td>BUILD_TUTORIALS</td>     <td>Builds the C++ version of the Embree tutorials.</td><td>ON</td></tr>
  <tr><td>BUILD_TUTORIALS_ISPC</td><td>Builds the ISPC version of the Embree tutorials.</td><td>ON</td></tr>
  <tr><td>CMAKE_BUILD_TYPE</td>    <td>Can be used to switch between Debug mode (Debug) and Release mode (Release)</td><td>Release</td></tr>
  <tr><td>COMPILER</td>            <td>Select either GCC, ICC, or CLANG as compiler.</td><td>GCC</td></tr>


  <tr><td>RTCORE_EXIT_ON_ERROR</td>      <td>Exits the application as soon an some error occurs.</td><td>OFF</td></tr>
  <tr><td>RTCORE_INTERSECTION_FILTER</td><td>Enables the intersection filter feature.</td><td>ON</td></tr>
  <tr><td>RTCORE_BUFFER_STRIDE</td>      <td>Enables buffer stride feature.</td><td>ON</td></tr>
  <tr><td>RTCORE_RAY_MASK</td>           <td>Enables the ray masking feature.</td><td>OFF</td></tr>
  <tr><td>RTCORE_SPINLOCKS</td>          <td>Enables faster spinlocks for some builders.</td><td>ON (Linux), OFF (MacOS, Windows)</td></tr>

  <tr><td>TARGET_SSE2</td>          <td>Enables SSE2 for ISPC tutorials. SSE2 kernels are always build.</td><td>ON</td></tr>
  <tr><td>TARGET_SSE41</td>         <td>Enables SSE4.1 for kernels and ISPC tutorials.</td><td>ON</td></tr>
  <tr><td>TARGET_AVX</td>           <td>Enables AVX for kernels and ISPC tutorials.</td><td>ON</td></tr>
  <tr><td>TARGET_AVX2</td>           <td>Enables AVX2 for kernels and ISPC tutorials.</td><td>ON</td></tr>
  <tr><td>TARGET_XEON_PHI</td>       <td>Enables generation of Xeon Phi&trade; version of kernels and tutorials.</td><td>OFF</td></tr>
</table>

<p>You need at least Intel Compiler 11.1 or GCC 4.4 to enable AVX and
Intel Compiler 12.1 or GCC 4.7 to enable AVX2. </p>

<p>If the intersection filter feature is not required, some additional
performance (between 1%-8%) can be achieved when disabling this
feature at compile time. The buffer stride feature has no impact on
rendering performance, but disabling can increase performance for
building spatial hierarchies, in particular on Xeon Phi&trade;.</p>

 <h3>Compiling Embree on Windows</h3>

 <p>Embree requires the Intel SPMD Compiler (ISPC) to compile. We have
 tested ISPC version 1.6.0, but more recent versions of ISPC should
 also work. You can download and install the ISPC binaries from <a
  href="http://ispc.github.com/downloads.html">ispc.github.com</a>. After
 installation, put the path to ispc.exe permanently into your PATH
 environment variable. You have to restart Visual Studio for this
 change to take effect.</p>
      
  <p>For compilation of Embree under Windows use the Visual Studio
  2008 solution file embree_vs2008.sln or Visual Studio 2010 solution
  file embree_vs2010.sln. The project compiles in 32 bit and 64 bit
  mode. The solution is by default setup to use the Microsoft
  Compiler. You can switch to the Intel Compiler by right clicking
  onto the solution in the Solution Explorer and then selecting the
  Intel Compiler. We recommend using 64 bit mode and the Intel
  Compiler for best performance.</p>
      
  <p>In Visual Studio, you will find 4 build configurations, Debug
  (for SSE2 debug mode), Release (for SSE2 release mode), ReleaseAVX
  (for AVX release mode), and ReleaseAVX2 (for AVX2 release
  mode). When using the Microsoft Compiler you can only use the Debug and
  Release configuration. For enabling the ReleaseAVX configuration you
  need at least Intel Compiler 11.1 and for the ReleaseAVX2
  configuration you need at least Intel Compiler 12.1.</p>
  
  <p>Most configuration parameters described for the Linux build can
  be set under Windows by commenting out the appropiate lines in the
  common/sys/platform.h file.</p>

  <p>We recommend enabling syntax highlighting for the .ispc source
  and .isph header files. To do so open Visual Studio 2008, go to
  Tools -> Options -> Text Editor -> File Extension and add the isph
  and ispc extension for the "Microsoft Visual C++" editor.</p>

 */
