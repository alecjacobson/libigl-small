/*!
  \mainpage Embree - High Performance Ray Tracing Kernels

  \image html crown.jpg The emblemic "Crown" model rendered with Embree"

<h3>What is Embree?</h3>

<p>Embree is a collection of high-performance ray tracing kernels,
developed at Intel. The target user of Embree are graphics application
engineers that want to improve the performance of their application by
leveraging the optimized ray tracing kernels of Embree. The kernels
are optimized for photo-realistic rendering on the latest Intel&reg;
processors with support for SSE, AVX, AVX2, and the 16-wide Xeon Phi&trade;
vector instructions. Embree supports runtime code selection to choose
the traversal and build algorithms that best matches the instruction
set of your CPU. We recommend using Embree through its API to get the
highest benefit from future improvements. Embree is released as Open
Source under the <a
 href="http://www.apache.org/licenses/LICENSE-2.0">Apache 2.0
license</a>.</p>

<p>Embree supports applications written with the Intel SPMD Programm
Compiler (ISPC, <a
 href="http://ispc.github.com">http://ispc.github.com</a>) by also
providing an ISPC interface to the core ray tracing algorithms. This
makes it possible to write a renderer in ISPC that leverages SSE, AVX,
AVX2, and Xeon Phi&trade; instructions without any code change. ISPC
also supports runtime code selection, thus ISPC will select the best
code path for your application, while Embree selects the optimal code
path for the ray tracing algorithms.</p>

<p>Embree contains algorithms optimized for incoherent workloads (e.g.
Monte Carlo ray tracing algorithms) and coherent workloads
(e.g. primary visibility and hard shadow rays). For standard CPUs, the
single-ray traversal kernels in Embree provide the best performance
for incoherent workloads and are very easy to integrate into existing
rendering applications. For Xeon Phi&trade;, a renderer written in
ISPC using the default hybrid ray/packet traversal algorithms have
shown to perform best, but requires writing the renderer in ISPC. In
general for coherent workloads, ISPC outperforms the single ray mode
on each platform. Embree also supports dynamic scenes by implementing
high performance two-level spatial index structure construction
algorithms.</p>
        
<p>In addition to the ray tracing kernels, Embree provides some
tutorials to demonstrate how to use the <a href="api.html">Embree
API</a>. The example photorealistic renderer that was originally
included in the Embree kernel package is now available in a separate
GIT repository (see <a href="renderer.html">Embree Example
Renderer</a>).</p>

<h3>What's New in Embree 2.2?</h3>
<ul>
  <li>Support for Motion Blur on Xeon Phi&trade;</li>
  <li>Support for intersection filter callback functions</li>
  <li>Support for buffer sharing with the application</li>
  <li>Lots of AVX2 optimizations, e.g. ~20% faster 8-wide hybrid traversal</li>
  <li>Experimental support for 8-wide (AVX/AVX2) and 16-wide BVHs (Xeon Phi)</li>
</ul>    
</ul>

<h3>What's New in Embree 2.1?</h3>
<ul>
  <li>new future proof API with a strong focus on supporting dynamic scenes</li>
  <li>lots of optimizations for 8-wide AVX2 (Intel Haswell&trade; architecture)</li>
  <li>automatic runtime code selection for SSE, AVX, and AVX2</li>
  <li>support for user-defined geometry</li>
  <li>new and improved BVH builders:</li>
<ul style="padding-left:20px">
  <li>fast adaptive Morton code-based builder (w/o SAH-based top-level
  rebuild)</li>
  <li>both the SAH and Morton code-based builders got faster (Xeon Phi&trade;)</li>
  <li>new variant of the SAH-based builder using triangle pre-splits (Xeon Phi&trade;)</li>
</ul>    
</ul>

<h3>Example performance numbers for Embree 2.1</h3>

BVH rebuild performance (including triangle accel generation,
excluding memory allocation) for scenes with 2-12 million triangles:

<ul>
  <li>Intel&reg; Core&trade; i7 (Haswell-based CPU, 4 cores @ 3.0 GHz) </li>
  <ul style="padding-left:20px">
    <li>7-8 million triangles/s for the SAH-based BVH builder</li>
    <li>30-36 million triangles/s for the Morton code-based BVH builder</li>
  </ul>    
  <li>Intel Xeon Phi&trade; 7120 </li>
  <ul style="padding-left:20px">
    <li>37-40 million triangles/s for the SAH-based BVH builder</li>
    <li>140-160 million triangles/s for the Morton code-based BVH builder</li>
  </ul>
</ul>    
  
Rendering of the Crown model (crown.ecs) with 4 samples per pixel
(-spp 4):

<ul>
  <li>Intel&reg; Core&trade; i7 (Haswell-based CPU, 4 cores CPU @ 3.0 GHz) </li>
  <ul style="padding-left:20px">
    <li>1024x1024 resolution: 7.8 million rays per sec</li>
    <li>1920x1080 resolution: 9.9 million rays per sec</li>
  </ul>    
  <li>Intel Xeon Phi&trade; 7120 </li>
  <ul style="padding-left:20px">
    <li>1024x1024 resolution: 47.1 million rays per sec</li>
    <li>1920x1080 resolution: 61.1 million rays per sec</li>
  </ul>    
</ul>


<h3>What's New in Embree 2.0?</h3>
<ul>
  <li>support for the Intel Xeon Phi&trade; coprocessor platform </li>
  <li>support for high-performance "packet" kernels on SSE, AVX, and Xeon Phi&trade;</li>
  <li>integration with the Intel SPMD Program Compiler (ISPC)</li>
  <li>instantiation and fast BVH reconstruction</li>
  <li>example photo-realistic rendering engine for both C++ and ISPC</li>
</ul>

\section contact Contact 

If you have questions related to
Embree -- or if you found a bug -- please contact the Embree developers
at embree_support@intel.com .

 */
