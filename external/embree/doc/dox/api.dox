/*! \page embree_api Embree API

<h1>Embree API</h1>

<p>The Embree API is a low level ray tracing API that supports
defining and committing of geometry and performing ray queries of
different types. Static and dynamic scenes are supported, that may
contain triangular geometry (including linear motions for motion
blur), instanced geometry, and user defined geometry. Supported ray
queries are, finding the closest scene intersection along a ray, and
testing a ray segment for any intersection with the scene. Single
rays, as well as packets of rays in a struct of array layout can be
used for packet sizes of 1, 4, 8, and 16. Filter callback functions
are supported, that get invoked for every intersection encountered
during traversal.</p>

<p>The Embree API exists in a C++ and ISPC version. This document
describes the C++ version of the API, the ISPC version is almost
identical. The only differences are that the ISPC version needs some
ISPC specific uniform type modifiers, and limits the ray packets to the
native SIMD size the ISPC code is compiled for.</p>

<p>The user is supposed to include the <code>embree2/rtcore.h</code>, and the
<code>embree2/rtcore_ray.h</code> file, but none of the other header files. If using
the ISPC version of the API, the user should include
<code>embree2/rtcore.isph</code> and <code>embree2/rtcore_ray.isph</code>.</p>

<pre><code>#include &lt;embree2/rtcore.h&gt;
#include &lt;embree2/rtcore_ray.h&gt;
</code></pre>

<p>All API calls carry the prefix <code>rtc</code> which stands for
<b>r</b>ay <b>t</b>racing <b>c</b>ore. Before invoking any API call,
the Embree ray tracing core has to get initialized through the
<code>rtcInit</code> call. Before the application exits it should call
<code>rtcExit</code>. Initializing Embree again after an
<code>rtcExit</code> is allowed.</p>

   <pre><code>rtcInit(NULL);
...
rtcExit();
</code></pre>

<p>The <code>rtcInit</code> call initializes the ray tracing core. An
optional configuration string can be passed through this function to
configure implementation specific parameters. If this string is NULL,
a default configuration is used, that is optimal for most
usages.</p>

<p>API calls that access geometries are only thread safe as long as
different geometries are accessed. Accesses to one geometry have to
get sequentialized by the application. All other API calls are thread
safe. The <code>rtcIntersect</code> and <code>rtcOccluded</code> calls
are re-entrant, but only for other <code>rtcIntersect</code> and
<code>rtcOccluded</code> calls. It is thus safe to trace new rays when
intersecting a user defined object, but not supported to create new
geometry inside the intersect function of a user defined geometry.</p>

<p>Each user thread has its own error flag in the API. If an error
occurs when invoking some API function, this flag is set to an error
code if it stores no previous error. The <code>rtcGetError</code>
function reads and returns the currently stored error and clears the
error flag again. For performance reasons the ray query functions do
not set an error flag, but fail hard in some circumstances (e.g. if
the user forgot to perform an <code>rtcCommit</code>).</p>

<p>Possible error codes returned by <code>rtcGetError</code> are:</p>

<table>
  <tr><th>Error Code</th><th>Description</th></tr>
  <tr><td>RTC_NO_ERROR</td><td>No error occured.</td></tr>
  <tr><td>RTC_UNKNOWN_ERROR</td><td>An unknown error has occured.</td></tr>
  <tr><td>RTC_INVALID_ARGUMENT</td><td>An invalid argument was specified.</td></tr>
  <tr><td>RTC_INVALID_OPERATION</td><td>The operation is not allowed
 for the specified object.</td>
 <tr><td>RTC_OUT_OF_MEMORY</td><td>There is not enough memory left to
 <tr><td>RTC_UNSUPPORTED_CPU</td><td>The CPU is not supported as it does not support SSE2.</td></tr>
</table>

<h2>Scene</h2>

<p>A scene is a container for a set of geometries of potentially
different types. A scene is created using the <code>rtcNewScene</code>
function call, and destroyed using the <code>rtcDeleteScene</code>
function call. Two types of scenes are supported, dynamic and static
scenes. Different flags specify the type of scene to create and the
type of ray query operations that can later be performed on the
scene. The following example creates a scene that supports dynamic
updates and the single ray <code>rtcIntersect</code> and
<code>rtcOccluded</code> calls.</p>

   <pre><code>RTCScene scene = rtcNewScene(RTC_SCENE_DYNAMIC,RTC_INTERSECT1);
...
rtcDeleteScene(scene);
</code></pre>

<p>Using the following scene flags the user can select between creating a
static and dynamic scene.</p>

<table>
  <tr><th>Scene Flag</th><th>Description</th></tr>
  <tr><td>RTC_SCENE_STATIC</td><td>scene optimized for static geometry</td></tr>
  <tr><td>RTC_SCENE_DYNAMIC</td><td>scene optimized for dynamic geometry</td></tr>
</table>

<p>A dynamic scene is created by invoking <code>rtcNewScene</code>
with the <code>RTC_SCENE_DYNAMIC</code> flag. Different geometries can
now be created inside that scene. Geometries are enabled by
default. Once the scene geometry is specified, an
<code>rtcCommit</code> call will finish the scene description and
trigger building of internal data structures. After the
<code>rtcCommit</code> call it is safe to perform ray queries of the
type specified at scene construction time. Geometries can get disabled
(<code>rtcDisable</code> call), enabled again (<code>rtcEnable</code>
call), and deleted (<code>rtcDeleteGeometry</code> call). Geometries
can also get modified, including their vertex and index arrays. After
the modification of some geometry, <code>rtcModified</code> has to get
called for that geometry. If geometries got enabled, disabled,
deleted, or modified an <code>rtcCommit</code> call has to get invoked
before performing any ray queries for the scene, otherwise the effect
of the ray query is undefined.</p>

<p>A static scene is created by the <code>rtcNewScene</code> call with
the <code>RTC_SCENE_STATIC</code> flag. Geometries can only be created
and modified until the first <code>rtcCommit</code> call. After the
<code>rtcCommit</code> call, each access to any geometry of that
static scene is invalid, including enabling, disabling, modifying, and
deletion of geometries. Consequently, geometries that got created
inside a static scene can only get deleted by deleting the entire
scene.</p>

<p>The following flags can be used to tune the used acceleration
structure. These flags are only hints and may be ignored by the
implementation.</p>

<table>
  <tr><th>Scene Flag</th><th>Description</th></tr>
  <tr><td>RTC_SCENE_COMPACT</td><td>Creates a compact data structure and
avoids algorithms that consume much memory.</td></tr>
  <tr><td>RTC_SCENE_COHERENT</td><td>Optimize for coherent rays (e.g. primary rays)</td></tr>
  <tr><td>RTC_SCENE_INCOHERENT</td><td>Optimize for in-coherent rays (e.g. diffuse reflection rays)</td></tr>
  <tr><td>RTC_SCENE_HIGH_QUALITY</td><td>Build higher quality spatial data structures.</td></tr>
</table>

<p>The following flags can be used to tune the traversal algorithm
that is used by Embree. These flags are only hints and may be ignored
by the implementation.</p>

<table>
  <tr><th>Scene Flag</th><th>Description</th></tr>
  <tr><td>RTC_SCENE_ROBUST</td><td>Avoid optimizations that reduce arithmetic accuracy.</td></tr>
</table>

<p>The second argument of the <code>rtcNewScene</code> function are
algorithm flags, that allow to specify which ray queries are required
by the application. Calling for a scene a ray query API function that
is different to the ones specified at scene creation time is not
allowed. Further, the application should only pass ray query requirements that
are really needed, to give Embree most freedom in choosing the best
algorithm. E.g. in case Embree implements no packet traversers for some
highly optimized data structure for single rays, then this data
structure cannot be used if the user specifies any ray packet
query.</p>

<table>
  <tr><th>Algorithm Flag</th><th>Description</th></tr>
  <tr><td>RTC_INTERSECT1</td><td>Enables the <code>rtcIntersect</code>
  and <code>rtcOccluded</code> functions (single ray interface) for this scene</td></tr>
  <tr><td>RTC_INTERSECT4</td><td>Enables the
  <code>rtcIntersect4</code> and <code>rtcOccluded4</code> functions
  (4-wide packet interface) for this scene</td></tr>
  <tr><td>RTC_INTERSECT8</td><td>Enables the
  <code>rtcIntersect8</code> and <code>rtcOccluded8</code> functions
  (8-wide packet interface ) for this scene</td></tr>
  <tr><td>RTC_INTERSECT16</td><td>Enables the
  <code>rtcIntersect16</code> and <code>rtcOccluded16</code> functions
  (16-wide packet interface) for this scene</td></tr>
</table>

<h2>Geometries</h2>

<p>Geometries are always contained in the scene they are created
in. Each geometry is assigned an integer ID at creation time, which is
unique for that scene. The current version of the API supports
triangle meshes (<code>rtcNewTriangleMesh</code>), single level
instances of other scenes (<code>rtcNewInstance</code>), and user
defined geometries (<code>rtcNewUserGeometry</code>). The API is
designed in a way that easily allows adding new geometry types in
later releases.</p>

<p>For dynamic scenes, the assigned geometry IDs fulfill the following
properties. As long as no geometry got deleted, all IDs are assigned
sequentially, starting from 0. If geometries got deleted, the
implementation will reuse IDs later on in an implementation dependent
way. Consequently sequential assignment is no longer guaranteed, but a
compact range of IDs. These rules allow the application to manage a
dynamic array to efficiently map from geometry IDs to its own geometry
representation.</p>

<p>For static scenes, geometry IDs are assigned sequentially starting
at 0. This allows the application to use a fixed size array to map
from geometry IDs to its own geometry representation.</p>

<h3>Triangle Meshes</h3>

<p>Triangle meshes are created using the
<code>rtcNewTriangle</code> mesh function call, and potentially
deleted using the <code>rtcDeleteGeometry</code> function call.</p>

<p>The number of triangles, number of vertices, and number of time
steps (1 for normal meshes, and 2 for linear motion blur), have to get
specified at construction time of the mesh. The user can also specify
additional flags that choose the strategy to handle that mesh in
dynamic scenes. The following example demonstrates howto create a
triangle mesh without motion blur:</p>

<pre><code>unsigned geomID = rtcNewTriangleMesh(scene,geomFlags,numTriangles,numVertices,1);</code></pre>

<p>The following geometry flags can be specified at construction time of
the triangle mesh:</p>

<table>
  <tr><th>Geometry Flag</th><th>Description</th></tr>
  <tr><td>RTC_GEOMETRY_STATIC</td><td>The mesh is considered static
  and should get modified rarely by the application. This flag
  has to get used in static scenes.</td></tr>
  <tr><td>RTC_GEOMETRY_DEFORMABLE</td><td>The mesh is considered
  to deform in a coherent way, e.g. a skinned character. The
  connectivity of the mesh has to stay constant, thus modifying the
  index array is not allowed. The
  implementation is free to choose a BVH refitting approach for
  handling meshes tagged with that flag.</td></tr>
  <tr><td>RTC_GEOMETRY_DYNAMIC</td><td>The mesh is considered highly
  dynamic and changes frequently, possibly in an unstructured way. Embree
  will rebuild data structures from scratch for this type of mesh.</td></tr>
</table>

<p>The triangle indices can be set by mapping and writing to the index
buffer (<code>RTC_INDEX_BUFFER</code>) and the triangle vertices can
be set by mapping and writing into the vertex buffer
(<code>RTC_VERTEX_BUFFER</code>). The index buffer contains an array
of three 32 bit indices, while the vertex buffer contains an array of
3 float values aligned to 16 bytes. All buffers have to get unmapped
before an <code>rtcCommit</code> call to the scene.</p>

<pre><code>struct Vertex   { float x,y,z,a; };
struct Triangle { int v0, v1, v2; };

Vertex* vertices = (Vertex*) rtcMapBuffer(scene,geomID,RTC_VERTEX_BUFFER);
// fill vertices here
rtcUnmapBuffer(scene,geomID,RTC_VERTEX_BUFFER);

Triangle* triangles = (Triangle*) rtcMapBuffer(scene,geomID,RTC_INDEX_BUFFER);
// fill triangle indices here
rtcUnmapBuffer(scene,geomID,RTC_INDEX_BUFFER);
</code></pre>

<p>A triangle mesh with linear motion blur support is created by
setting the number of time steps to 2 at mesh construction
time. Specifying a number of time steps of 0 or larger than 2 is invalid. For
a triangle mesh with linear motion blur, the user has to set the
<code>RTC_VERTEX_BUFFER0</code> and <code>RTC_VERTEX_BUFFER1</code>
vertex arrays, one for each time step. If a scene contains triangle
meshes with linear motion blur, the user has to set the
<code>time</code> member of the ray to a value in the range [0,1]. The
ray will intersect the scene with the vertices of the two time steps
linearly interpolated to this specified time. Each ray can specify a
different time, even inside a ray packet.</p>

<p>A 32 bit geometry mask can be assigned to triangle mesh geometries
using the <code>rtcSetMask</code> call.</p>

<pre><code>rtcSetMask(scene,geomID,mask);</code></pre>

<p>Only if the bitwise <code>and</code> operation of this mask with
the mask stored inside the ray is not 0, triangles of this mesh are
hit by a ray. This feature can be used to disable selected triangle
meshes for specifically tagged rays, e.g. to disable shadow casting
for some geometry. This API feature is disabled in Embree by default
at compile time, and can be enabled in cmake through the
<code>RTCORE_ENABLE_RAY_MASK</code> parameter.</p>

<p>See tutorial00 for an example of how to create triangle meshes.</p>

<h3>User Defined Geometry</h3>

<p>User defined geometries make it possible to extend Embree with
arbitrary types of geometry. This is achieved by introducing arrays of
user geometries as a special geometry type. These objects do not
contain a single user geometry, but a set of such geometries, each
specified by an index. The user has to provide a user data pointer,
bounding function as well as user defined intersect and occluded
functions to create a set of user geometries. The user geometry to
process is specified by passing its user data pointer and index to
each invokation of the bounding, intersect, and occluded function. The
bounding function is used to query the bounds of each user
geometry. When performing ray queries, Embree will invoke the user
intersect (and occluded) functions to test rays for intersection (and
occlusion) with the specified user defined geometry.</p>

<p>As Embree supports different ray packet sizes, one potentially has
to provide different versions of user intersect and occluded function
pointers for these packet sizes. However, the ray packet size of the
called user function always matches the packet size of the originally
invoked ray query function. Consequently, an application only
operating on single rays only has to provide single ray intersect and
occluded function pointers. </p>

<p>User geometries are created using the
<code>rtcNewUserGeometry</code> function call, and potentially deleted
using the <code>rtcDeleteGeometry</code> function call. The folling
example illustrates creating an array with two user geometries:</p>

<pre><code>struct UserObject { ... };

void userBoundsFunction(UserObject* userGeom, size_t i, RTCBounds& bounds_o) {
  bounds_o = bounds of userGeom[i];
}

void userIntersectFunction(UserObject* userGeom, RTCRay& ray, size_t i) {
  if (ray misses userGeom[i]) return;
  update ray hit information;
}

void userOccludedFunction(UserObject* userGeom, RTCRay& ray, size_t i) {
  if (ray misses userGeom[i]) return;
  geomID = 0;
}

...

UserObject* userGeom = new UserObject[2];
userGeom[0] = ...
userGeom[1] = ...
unsigned geomID = rtcNewUserGeometry(scene,2);
rtcSetUserData(scene,geomID,userGeom);
rtcSetBounds(scene,geomID,userBoundsFunction);
rtcSetIntersectFunction(scene,geomID,userIntersectFunction);
rtcSetOccludedFunction (scene,geomID,userOccludedFunction);</code></pre>

<p>The user intersect function (<code>userIntersectFunction</code>)
and user occluded function (<code>userOccludedFunction</code>) get as
input the pointer provided through the <code>rtcSetUserData</code>
function call, a ray, and the index of the geometry to process. For
ray packets, the user intersect and occluded functions also get a
pointer to a valid mask as input. The user provided functions should
not modify any ray that is disabled by that valid mask.</p>

<p>The user intersect function should return without modifying the ray
structure if the user geometry is missed. If the geometry is hit, it
has to update the hit information of the ray (<code>tfar</code>,
<code>u</code>, <code>v</code>, <code>Ng</code>, <code>geomID</code>,
<code>primID</code>).</p>

<p>Also the user occluded function should return without modifying the
ray structure if the user geometry is missed. If the geometry is hit,
it shoud set the <code>geomID</code> member of the ray to 0.</p>

<p>Is is supported to invoke the <code>rtcIntersect</code> and
<code>rtcOccluded</code> function calls inside such user functions. It
is not supported to invoke any other API call inside these user
functions.</p>

<p>See tutorial02 for an example of how to use the user defined
geometries.</p>

<h3>Instances</h3>

<p>Embree supports instancing of scenes inside another scene by some
transformation. As the instanced scene is stored only a single time,
even if instanced to multiple locations, this feature can be used to
create extremely large scenes. Only single level instancing is
supported by Embree natively, however, multi-level instancing can
principally be implemented through user geometries.</p>

<p>Instances are created using the <code>rtcNewInstance</code>
function call, and potentially deleted using the
<code>rtcDeleteGeometry</code> function call. To instantiate a scene,
one first has to generate the scene B to instantiate. Now one can add
an instance of this scene inside a scene A the following way:</p>

<pre><code>unsigned instID = rtcNewInstance(sceneA,sceneB);
rtcSetTransform(sceneA,instID,RTC_MATRIX_COLUMN_MAJOR,&column_matrix_3x4);
</code></pre>

<p>One has to call <code>rtcCommit</code> on scene B before one calls
<code>rtcCommit</code> on scene A. When modifying scene B one has to
call <code>rtcModified</code> for all instances of that
scene. Providing a bounding box is not required and also not
allowed. If a ray hits the instance, then the geomID and primID
members of the ray are set to the geometry ID and primitive ID of the
primitive hit in scene B, and the instID member of the ray is set to
the instance ID returned from the <code>rtcNewInstance</code>
function.</p>

<p>The <code>rtcSetTransform</code> call can be passed an affine
transformation matrix with different data layouts:</p>

<table>
  <tr><th>Layout</th><th>Description</th></tr>
  <tr><td>RTC_MATRIX_ROW_MAJOR</td><td>The 3x4 float matrix is layed out in row
  major form.</td></tr>
  <tr><td>RTC_MATRIX_COLUMN_MAJOR</td><td>The 3x4 float matrix is layed out
  in column major form.</td></tr>
  <tr><td>RTC_MATRIX_COLUMN_MAJOR_ALIGNED16</td><td>The 3x4 float matrix is
  layout out in column major form, with each column padded by an
  additional 4th component.</td></tr>
</table>

<p>Passing homogenous 4x4 matrices is possible as long as the last row
is (0,0,0,1). If this homogenous matrix is layed out in row major
form, use the <code>RTC_MATRIX_ROW_MAJOR</code> layout. If this
homogenous matrix is layed out in column major form, use the
<code>RTC_MATRIX_COLUMN_MAJOR_ALIGNED16</code> mode. In both cases,
Embree will ignore the last row of the matrix.</p>

<p>The transformation passed to <code>rtcSetTransform</code>
transforms from the local space of the instantiated scene, to world
space.</code>

<p>See tutorial04 for an example of how to use instances.</p>

<h3>Buffer Sharing</h3> 

<p>Embree supports sharing of buffers with the application. Each buffer
that can be mapped for a specific geometry can also be shared with the
application, by pass a pointer, offset, and stride of the application
side buffer using the <code>rtcSetBuffer</code> API function.</p>

<pre><code>void rtcSetBuffer(RTCScene scene, unsigned geomID, RTCBufferType type, 
                  void* ptr, size_t offset, size_t stride);</code></pre>

<p>The <code>rtcSetBuffer</code> function has to get called before any
call to <code>rtcMapBuffer</code> for that buffer, otherwise the
buffer will get allocated internally and the call to
<code>rtcSetBuffer</code> will fail. The buffer has to remain valid as
long as the geometry exists, and the user is responsible to free the
buffer when the geometry gets deleted. 

When a buffer is shared, it is safe to modify that buffer without
mapping and unmapping it. However, for dynamic scenes one still has to
call <code>rtcModified</code> for modified geometries and the buffer
data has to stay constant from the <code>rtcCommit</code> call to
after the last ray query invokation.</p>

<p>The <code>offset</code> parameter specifies a byte offset to the
start of the first element and the <code>stride</code> parameter
specifies a byte stride between the different elements of the shared
buffer. This support for offset and stride allows the application
quite some freedom in the data layout of these buffers, however, some
restrictions apply. Index buffers always store 32 bit indices and
vertex buffers always store single precision floating point data. The
start address ptr+offset and stride always have to be aligned to 4
bytes on Xeon CPUs and 16 bytes on Xeon Phi accelerators, otherwise
the <code>rtcSetBuffer</code> function will fail. For vertex buffers,
the 4 bytes after the z-coordinate of the last vertex have to be
readable memory, thus padding is required for some layouts.</p>

<p>The following is an example of howto create a mesh with shared index
and vertex buffers:</p>

<pre><code>unsigned geomID = rtcNewTriangleMesh(scene,geomFlags,numTriangles,numVertices,1);
rtcSetBuffer(scene,geomID,RTC_VERTEX_BUFFER,vertexPtr,0,3*sizeof(float));
rtcSetBuffer(scene,geomID,RTC_INDEX_BUFFER ,indexPtr ,0,3*sizeof(int));
</code></pre>

<p>Sharing buffers can significantly reduce the memory required by the
application, thus we recommend using this feature. When enabling the
<code>RTC_COMPACT</code> scene flag, the spatial index structures of
Embree might also share the vertex buffer, resulting in even higher
memory savings.</p>

<p>The support for offset and stride is enabled by default, but can
get disabled at compile time using the
<code>RTCORE_BUFFER_STRIDE</code> parameter in cmake. Disabling this
feature enables the default offset and stride which increases
performance of spatial index structure build, thus can be useful for
dynamic content.</p>

<h2>Ray Queries</h2>

<p>The API supports finding the closest hit of a ray segment with the
scene (<code>rtcIntersect</code> functions), and determining if any hit between a
ray segment and the scene exists (<code>rtcOccluded</code> functions).</p>

<pre><code>void rtcIntersect   (                   RTCScene scene, RTCRay& ray);
void rtcIntersect4  (const void* valid, RTCScene scene, RTCRay4& ray);
void rtcIntersect8  (const void* valid, RTCScene scene, RTCRay8& ray);
void rtcIntersect16 (const void* valid, RTCScene scene, RTCRay16& ray);
void rtcOccluded    (                   RTCScene scene, RTCRay& ray);
void rtcOccluded4   (const void* valid, RTCScene scene, RTCRay4& ray);
void rtcOccluded8   (const void* valid, RTCScene scene, RTCRay8& ray);
void rtcOccluded16  (const void* valid, RTCScene scene, RTCRay16& ray);
</code></pre>

<p>The ray layout to be passed to the ray tracing core is defined in the
<code>embree2/rtcore_ray.h</code> header file. It is up to the user if
he wants to use the ray structures defined in that file, or resemble
the exact same binary data layout with their own vector classes. The
ray layout might change with new Embree releases as new features get
added, however, will stay constant as long as the major release number
does not change. The ray contains the following data members:</p>

<table>
  <tr><th>Member</th><th>In/Out</th><th>Description</th></tr>
  <tr><td>org</td><td>in</td><td>ray origin</td></tr>
  <tr><td>dir</td><td>in</td><td>ray direction (can be unnomalized)</td></tr>
  <tr><td>tnear</td><td>in</td><td>start of ray segment</td></tr>
  <tr><td>tfar</td><td>in/out</td><td>end of ray segment, set to hit distance after intersection</td></tr>
  <tr><td>time</td><td>in</td><td>time used for motion blur</td></tr>
  <tr><td>mask</td><td>in</td><td>ray mask to mask out geometries</td></tr>

  <tr><td>Ng</td><td>out</td><td>unnormalized geometry normal</td></tr>
  <tr><td>u</td><td>out</td><td>barycentric u-coordinate of hit</td></tr>
  <tr><td>v</td><td>out</td><td>barycentric v-coordinate of hit</td></tr>
  <tr><td>geomID</td><td>out</td><td>geometry ID of hit geometry</td></tr>
  <tr><td>primID</td><td>out</td><td>primitive ID of hit primitive</td></tr>
  <tr><td>instID</td><td>out</td><td>instance ID of hit instance</td></tr>
</table>

<p>This structure is in struct of array layout (SOA) for ray
packets. Note that the <code>tfar</code> member functions as an input
and output.</p>

<p>In the ray packet mode (with packet size of N), the user has to
provide a pointer to N 32 bit integers that act as a ray activity
mask. If one of these integers is set to 0x00000000 the corresponding
ray is considered inactive and if the integer is set to 0xFFFFFFFF,
the ray is considered active. Rays that are inactive will not update
any hit information. Data alignment requirements for ray query functions
operating on single rays is 16 bytes for the ray.</p>

<p>Data alignment requirements for query functions operating on AOS
packets of 4, 8, or 16 rays, is 16, 32, and 64 bytes respectively, for
the valid mask and the ray. To operate on packets of 4 rays, the CPU
has to support SSE, to operate on packets of 8 rays, the CPU has to
support AVX-256, and to operate on packets of 16 rays, the CPU has to
support the Xeon Phi instructions. Additionally, the required ISA has
to be enabled in Embree at compile time, to use the desired packet
size.</p>

<p>Finding the closest hit distance is done through the
<code>rtcIntersect</code> functions. These get the activity mask, the
scene, and a ray as input. The user has to initialize the ray origin
(<code>org</code>), ray direction (<code>dir</code>), and ray segment (<code>tnear</code>, <code>tfar</code>). The ray
segment has to be in the range [0,inf], thus ranges that start behind
the ray origin are not valid, but ranges can reach to infinity. The
geometry ID (<code>geomID</code> member) has to get initialized to
<code>RTC_INVALID_GEOMETRY_ID</code> (-1). If the scene contains instances, also the
instance ID (<code>instID</code>) has to get initialized to <code>RTC_INVALID_GEOMETRY_ID</code>
(-1). If the scene contains linear motion blur, also the ray time
(<code>time</code>) has to get initialized to a value in the range [0,1]. If ray masks are enabled at compile
time, also the ray mask (<code>mask</code>) has to get initialized. After tracing
the ray, the hit distance (<code>tfar</code>), geometry normal (<code>Ng</code>), local hit
coordinates (<code>u</code>, <code>v</code>), geometry ID (<code>geomID</code>), and primitive ID (<code>primID</code>) are
set. If the scene contains instances, also the instance ID (<code>instID</code>) is
set, if an instance is hit. The geometry ID corresponds to the ID
returned at creation time of the hit geometry, and the primitive ID
corresponds to the nth primitive of that geometry, e.g. nth
triangle. The instance ID corresponds to the ID returned at creation
time of the instance.</p>

<p>The following code properly sets up a ray and traces it through
the scene:</p>

<pre><code>RTCRay ray;
ray.org = ray_origin;
ray.dir = ray_direction;
ray.tnear = 0.0f;
ray.tfar = inf;
ray.geomID = RTC_INVALID_GEOMETRY_ID;
ray.primID = RTC_INVALID_GEOMETRY_ID;
ray.instID = RTC_INVALID_GEOMETRY_ID;
ray.mask = 0xFFFFFFFF;
ray.time = 0.0f;
rtcIntersect(scene,ray);
</code></pre>

<p>Testing if any geometry intersects with the ray segment is done
through the <code>rtcOccluded</code> functions. Initialization has to
be done as for <code>rtcIntersect</code>. If some geometry got found
along the ray segment, the geometry ID (<code>geomID</code>) will get
set to 0. Other hit information of the ray is undefined after
calling <code>rtcOccluded</code>.</p>

<p>See tutorial00 for an example of how to trace rays.</p>

<h2>Filter Functions</h2>

<p>The API supports per geometry filter callback functions that are
invoked for each intersection found during the
<code>rtcIntersect</code> or <code>rtcOccluded</code> calls. The
former ones are called intersection filter functions, the latter ones
occlusion filter functions. The filter functions can be used to
implement various useful features, such as rejecting a hit to
implement backface culling, accumulating opacity for shadow shadows,
counting the number of surfaces along a ray, collecting all hits along
a ray, etc. The filter functions are only supported for triangle mesh
geometry, including triangle meshes with motion blur.</p>

<p>The filter functions provided by the user have to have the
following signature:</p>

<pre><code>
void FilterFunc  (                   void* userPtr, RTCRay&   ray);
void FilterFunc4 (const void* valid, void* userPtr, RTCRay4&  ray);
void FilterFunc8 (const void* valid, void* userPtr, RTCRay8&  ray);
void FilterFunc16(const void* valid, void* userPtr, RTCRay16& ray);
</code></pre>

<p>The <code>valid</code> pointer points to a valid mask of the same
format as expected as input by the ray query functions. The
<code>userPtr</code> is a user pointer optionally set per geometry
through the <code>rtcSetUserData</code> function. The ray passed to
the filter function is the ray structure initially provided to the ray
query function by the user. For that reason, it is safe to extend the
ray by additional data and access this data inside the filter function
(e.g. to accumulate opacity). All hit information inside the ray is
valid. If the hit geometry is instanced, the <code>instID</code>
member of the ray is valid and the ray origin, direction, and geometry
normal visible through the ray are in object space. The filter
function can reject a hit by setting the <code>geomID</code> member of
the ray to <code>RTC_INVALID_GEOMETRY_ID</code>, otherwise the hit is
accepted. The filter function is not allowed to modify the ray input
data (<code>org</code>, <code>dir</code>, <code>tnear</code>,
<code>tfar</code>), but can modify the hit data of the ray
(<code>u</code>,<code>v</code>,<code>Ng</code>,<code>geomID</code>,<code>primID</code>).</p>

<p>The intersection filter functions for different ray types are set
for some geometry of a scene using the following API functions:</p>

<pre><code>
void rtcSetIntersectionFilterFunction  (RTCScene scene, unsigned geomID, RTCFilterFunc   func);
void rtcSetIntersectionFilterFunction4 (RTCScene scene, unsigned geomID, RTCFilterFunc4  func);
void rtcSetIntersectionFilterFunction8 (RTCScene scene, unsigned geomID, RTCFilterFunc8  func);
void rtcSetIntersectionFilterFunction16(RTCScene scene, unsigned geomID, RTCFilterFunc16 func);
</code></pre>

<p>These functions are invoked during execution of the
<code>rtcIntersect</code> type queries of the matching ray type. The
occlusion filter functions are set using the following API
functions:</p>

<pre><code>
void rtcSetOcclusionFilterFunction   (RTCScene scene, unsigned geomID, RTCFilterFunc   func);
void rtcSetOcclusionFilterFunction4  (RTCScene scene, unsigned geomID, RTCFilterFunc4  func);
void rtcSetOcclusionFilterFunction8  (RTCScene scene, unsigned geomID, RTCFilterFunc8  func);
void rtcSetOcclusionFilterFunction16 (RTCScene scene, unsigned geomID, RTCFilterFunc16 func);
</code></pre>

<p>See tutorial05 for an example of how to use the filter functions.</p>

 */
