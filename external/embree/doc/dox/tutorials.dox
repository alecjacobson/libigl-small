/*! \page embree_tutorials Embree Tutorials 

<h3>Embree Tutorials</h1>

<p>Embree comes with a set of tutorials aimed at helping users
understand how embree can be used and extended. All tutorials exist in
an ISPC and C version to demonstrate the two versions of the API. Look
for files names <code>tutorialXX_device.ispc</code> for the ISPC
implementation of the tutorial, and files named
<code>tutorialXX_device.cpp</code> for the single ray C version of the
tutorial. The tutorials can be found in the following folders:</p>

<dl>
    <dt>tutorials</dt>              <dd>Root directory for all tutorials</dd>
    <dt>tutorials/tutorial00</dt>     <dd>Creates a simple static scene</dd>
    <dt>tutorials/tutorial01</dt>     <dd>Creates a dynamic scene</dd>
    <dt>tutorials/tutorial02</dt>     <dd>Shows how to use user-defined geometry</dd>
    <dt>tutorials/tutorial03</dt>     <dd>A simple OBJ loader/viewer using Embree</dd>
    <dt>tutorials/tutorial04</dt>     <dd>Demonstrates instancing of geometry</dd>
    <dt>tutorials/tutorial05</dt>     <dd>Demonstrates the use of the filter functions to efficiently implement transparent objects.</dd>
    <dt>tutorials/tutorial06</dt>     <dd>A simple path tracer for OBJ files.</dd>
</dl>

<h4>Tutorial00</h2>

This tutorial demonstrates the creation of a static cube and ground
plane using triangle meshes. It also demonstrates the use of the
<code>rtcIntersect</code> and <code>rtcOccluded</code> functions to
render primary visibility and hard shadows. The cube sides are colored
based on the ID of the hit primitive.

<h4>Tutorial01</h2>

This tutorial demonstrates the creation of a dynamic scene, consisting
of several deformed spheres. Half of the spheres use the
RTC_GEOMETRY_DEFORMABLE flag, which allows Embree to use a refitting
strategy for these spheres, the other half uses the
RTC_GEOMETRY_DYNAMIC flag, causing a rebuild of their spatial data
structure each frame. The spheres are colored based on the ID of the
hit sphere geometry.

<h4>Tutorial02</h2>

This tutorial shows the use of user defined geometry, to re-implement
instancing and to add analytic spheres. A two level scene is created,
with a triangle mesh as ground plane, and several user geometries,
that instance other scenes with a small number of spheres of different
kind. The spheres are colored using the instance ID and geometry ID of
the hit sphere, to demonstrate how the same geometry, instanced in
different ways can be distinguished.

<h4>Tutorial03</h2>

This tutorial demonstrates a simple OBJ viewer that traces primary
visibility rays only. A scene consisting of multiple meshes is
created, each mesh sharing the index and vertex buffer with the
application. Demonstrated is also how to support additional per vertex
data, such as shading normals.

<h4>Tutorial04</h2>

This tutorial demonstrates the in-build instancing feature of Embree,
by instancing a number of other scenes build from triangulated
spheres. The spheres are again colored using the instance ID and
geometry ID of the hit sphere, to demonstrate how the same geometry,
instanced in different ways can be distinguished.

<h4>Tutorial05</h2>

This tutorial demonstrates the use of filter callback functions to
efficiently implement transparent objects. The filter function used
for primary rays, lets the ray pass through the geometry if it is
entirely transparent. Otherwise the shading loop handles the
transparency properly, by potentially shooting secondary rays. The
filter function used for shadow rays accumulates the transparency of
all surfaces along the ray, and terminates traversal if an opaque
occluder is hit.

<h4>Tutorial06</h2>

This tutorial is a simple path tracer, building on tutorial03.

<h3>Running the Tutorials</h1>

All tutorials come as C++ and ISPC version. To start the C++ version
use the <code>tutorialXX</code> executables, to start the ISPC version
use the <code>tutorialXX_ispc</code> executables.

You can select an initial camera using the -vp (camera position), -vi
(camera lookat point), -vu (camera up vector), and -fov (vertical
field of view) command line parameters:

<code>
  ./tutorial00 -vp 10 10 10 -vi 0 0 0
</code>

You can select the initial windows size using the -size command line
parameter, or start the tutorials in fullscreen using the -fullscreen
parameter:

<code>
  ./tutorial00 -size 1024 1024
  ./tutorial00 -fullscreen
</code>

Implementation specific parameters can be passed to the ray tracing
core through the -rtcore command line parameter, e.g.:

<code>
  ./tutorial00 -rtcore verbose=2,threads=1,accel=bvh4.triangle1
</code>

<p>The navigation in the interactive display mode follows the camera
orbit model, where the camera revolves around the current center of
interest. With the left mouse button you can rotate around the center
of interest (the point initially set with -vi). Holding Control
pressed while klicking the left mouse button rotates the camera around
its location. You can also use the arrow keys for navigation.</p>

<p>You can use the following keys:</p>

<dl>
    <dt>F1</dt>     <dd>Default shading</dd>
    <dt>F2</dt>     <dd>Gray EyeLight shading</dd>
    <dt>F3</dt>     <dd>Ambient occlusion shading</dd>
    <dt>F4</dt>     <dd>UV Coordinate visualization</dd>
    <dt>F5</dt>     <dd>Geometry normal visualization</dd>
    <dt>F6</dt>     <dd>Geometry ID visualization</dd>
    <dt>F7</dt>     <dd>Geometry ID and Primitive ID visualization</dd>
    <dt>F8</dt>     <dd>Simple shading with 16 rays per pixel for benchmarking.</dd>
    <dt>F9</dt>     <dd>Switches to render cost visualization. Pressing again reduces brightness.</dd>
    <dt>F10</dt>    <dd>Switches to render cost visualization. Pressing again increases brightness.</dd>
    <dt>f</dt>      <dd>Enters or leaves full screen mode.</dd>
    <dt>c</dt>      <dd>Prints camera parameters.</dd>
    <dt>ESC</dt>    <dd>Exists the tutorial.</dd>
    <dt>q</dt>      <dd>Exists the tutorial.</dd>
</dl>

*/
