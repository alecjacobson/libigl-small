// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#ifndef __EMBREE_ISPC_EMBREE_H__
#define __EMBREE_ISPC_EMBREE_H__

#include "intersector.isph"

struct RTCGeometry;

/*! Triangle indices */
struct RTCTriangle {
  int v0, v1, v2; //!< references to 1st, 2nd, and 3rd triangle vertex
  int id0, id1;   //!< two user IDs
};

/*! Vertex type */
struct RTCVertex {
  float x,y,z,align; 
};

/*! Transformation type */
struct RTCTransformation 
{
  float vxx,vxy,vxz; 
  float vyx,vyy,vyz; 
  float vzx,vzy,vzz; 
  float px ,py ,pz ; 
};

/*! Initialized the ray tracing core. */
void rtcInit();

/*! Starts the Embree threads. Embree threads might spin depending on implementation. */
void rtcStartThreads(uniform int numThreads);

/*! Starts the Embree threads. Embree threads might spin depending on implementation. */
void rtcStartThreads();

/*! Stops the Embree threads. Threads will stop spinning. */
void rtcStopThreads();

/*! Cleanup the ray tracing core. */
void rtcExit();

/*! Print debug info. */
void rtcDebug();

/*! Frees all unused internal memory. */
void rtcFreeMemory();

/*! enable verbose output */
void rtcSetVerbose(uniform int verbose);

/*! New list of objects. */
uniform RTCGeometry* uniform rtcNewVirtualGeometry (const uniform int numObjects);

/*! Set virtual object user data. */
void rtcSetVirtualGeometryUserData (uniform RTCGeometry* uniform geom, const uniform int i, const uniform int id0, const uniform int id1);

/*! Set virtual object user data. */
void rtcSetVirtualGeometryUserData (uniform RTCGeometry* uniform geom, const uniform int i, const uniform int id0, const uniform int id1, const uniform int mask);

/*! Set virtual object bounding box. */
void rtcSetVirtualGeometryBounds (uniform RTCGeometry* uniform geom, const uniform int i, 
                                  const uniform float* uniform lower, const uniform float* uniform upper, 
                                  const uniform RTCTransformation* uniform local2world);

/*! Set virtual object intersector. */
void rtcSetVirtualGeometryIntersector (uniform RTCGeometry* uniform geom, const uniform int i, const uniform RTCIntersector* uniform uniform intersector);

/*! Creates new triangle mesh. */
uniform RTCGeometry* uniform rtcNewTriangleMesh (const uniform int numTriangles, const uniform int numPositions);

/*! Map position buffer */
uniform RTCVertex* uniform rtcMapPositionBuffer(uniform RTCGeometry* uniform mesh); 

/*! Unmap position buffer */
void rtcUnmapPositionBuffer(uniform RTCGeometry* uniform mesh); 

/*! Map triangle buffer. */
uniform RTCTriangle* uniform rtcMapTriangleBuffer(uniform RTCGeometry* uniform mesh);

/*! Unmap triangle buffer. */
void rtcUnmapTriangleBuffer(uniform RTCGeometry* uniform mesh); 

/*! Set optional approximate bounds. */
void rtcSetApproxBounds (uniform RTCGeometry* uniform geom, const uniform float* uniform lower, const uniform float* uniform upper);

/*! News acceleration structure of specified type over some geometry. */
task void rtcBuildAccel (uniform RTCGeometry* uniform geom);

/*! Free unused buffers. */
void rtcCleanupGeometry (uniform RTCGeometry* uniform mesh);

/*! Destroys geometry. */
void rtcDeleteGeometry (uniform RTCGeometry* uniform mesh);

/*! Returns bounding box. */
void rtcGetBounds (uniform RTCGeometry* uniform geom, uniform float* uniform lower_o, uniform float* uniform upper_o);

/*! Query default intersector interface to the acceleration structure. */
uniform RTCIntersector* uniform rtcQueryIntersector (uniform RTCGeometry* uniform geom);

/*! Query intersector interface to the acceleration structure. */
uniform RTCIntersector* uniform rtcQueryIntersector (uniform RTCGeometry* uniform geom, void* uniform type);

/*! Destroy intersector. */
void rtcDeleteIntersector (uniform RTCIntersector* uniform intersector);

#endif
