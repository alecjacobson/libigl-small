// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#ifndef __EMBREE_ISPC_INTERSECTOR_H__
#define __EMBREE_ISPC_INTERSECTOR_H__

/*! Forward declarations */
struct Ray;
struct Intersector;

/*! Intersects the ray with the geometry and returns the hit information. */
typedef void (*intersectFunc)(const uniform Intersector* uniform This, varying Ray& ray);

/*! Tests the ray for occlusion with the scene. */
typedef varying bool (*occludedFunc )(const uniform Intersector* uniform This, varying Ray& ray);

/*! Interface to the traverser. A closest intersection
 *  point of a ray with the geometry can be found. A ray can also be
 *  tested for occlusion by any geometry. */
struct Intersector {
  intersectFunc intersect;  /*!< Pointer to intersect function */
  occludedFunc  occluded;   /*!< Pointer to occluded function */
};

typedef Intersector RTCIntersector;

#endif
